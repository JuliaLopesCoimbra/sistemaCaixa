// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//o prisma serve para conectar o postgress no codigo

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  //
  url      = env("DATABASE_URL")
}
//criar uma migration :yarn prisma migrate dev
model User{
  id String @id @default(uuid())
  name String 
  email String 
  password String
  created_at DateTime? @default(now())
  update_at DateTime @default(now())

  //mapeando como vai aparacer lá no bd
  @@map("users")
}

model Category{
  id String @id @default(uuid())
  name String 
  created_at DateTime? @default(now())
  update_at DateTime @default(now())

  //nome da tabela
  @@map("categories")
  //fazendo a relação, uma category pode ser any produtcs dentro
  products Product[]
}

model Product{
  id String @id @default(uuid())
  name String
  price String
  description String
  banner String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  //fazendo a relação
  category Category @relation(fields: [category_id], references: [id])


  //1 para N = uma categoria tem  varios produtos
  @@map("products")
  category_id String


  //isso aqui ta chamando a relação lá no model Item
  items Item[]
}

model Order{
  id String @id @default(uuid())
  nr_pedido Int


  //defalut começa com status sempre falso, pois o pedido precisa ser concluido
  status Boolean @default(false)


  //default true pq o pedido tem que ser rascunho, ele vai ser concluido e n sera mais rascunho e logo aparecxera na cozinha
  draft Boolean @default(true)
  
  //? significa ser opcional
  name String?


  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("orders")
  //isso aqui ta chamando a relação lá no model Item
  items Item[]
}

model Item{
  id String @id @default(uuid())
  //quantidade de products
  amount Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  //construindo a relação
  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("items")
  //esse vai ser o id do pedido da tabela order
  order_id String
  //esse vai ser o id do produto da tabela product
  product_id String
}